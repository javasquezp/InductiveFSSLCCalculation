function [fitresult, gof] = C_calculation(w, S21)
%CREATEFIT(W,S21)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : w
%      Y Output: S21
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 08-Dec-2021 16:11:43


%% Fit: 'untitled fit 1'.
[xData, yData] = prepareCurveData( w, S21 );
[A II]=min(S21);
[A I]=max(S21);
w1=w(I(1)); %% S11 Pole
w2=w(II(1)); %% S11 cero

% Set up fittype and options.
ft = fittype( '20*log10((abs((2*(((1./(C*((w1)^2)))+((1./(C*((w1)^2)))/(((w2)^2/(w1)^2-1))))./(C)-w.^2*(1./(C*((w1)^2)))*((1./(C*((w1)^2)))/(((w2)^2/(w1)^2-1))))./(j*w*(1./(C*((w1)^2)))+1./(j*w*C)))./(Zo+2*(((1./(C*((w1)^2)))+((1./(C*((w1)^2)))/(((w2)^2/(w1)^2-1))))./(C)-w.^2*(1./(C*((w1)^2)))*((1./(C*((w1)^2)))/(((w2)^2/(w1)^2-1))))./(j*w*(1./(C*((w1)^2)))+1./(j*w*C))))))', 'independent', 'w', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Algorithm = 'Levenberg-Marquardt';
opts.DiffMaxChange = 1e-20;
opts.DiffMinChange = 1e-30;
opts.Display = 'Off';
opts.Lower = [1e-16 377 round(w1) round(w2)];
opts.MaxFunEvals = 6000;
opts.MaxIter = 4000;
opts.Robust = 'Bisquare';
opts.StartPoint = [0.0496544303257421 377 round(w1) round(w2)];
opts.TolFun = 0.001;
opts.Upper = [1e-16 377 round(w1) round(w2)];

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'untitled fit 1' );
h = plot( fitresult, xData, yData );
legend( h, 'S21 vs. w', 'untitled fit 1', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'w', 'Interpreter', 'none' );
ylabel( 'S21', 'Interpreter', 'none' );
grid on


